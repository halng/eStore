version: "3.5"

services:
  postgres:
    image: postgres:15.4
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init-database.sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      # PGDATA: /data/postgres
    ports:
      - "5432:5432"
    networks:
      - estore_app
    restart: unless-stopped

  redis:
    image: docker.io/bitnami/redis:7.2
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - "6379:6379"
    volumes:
      - "redis_data:/bitnami/redis/data"
    networks:
      - estore_app

  auth:
    image: tanhaoke/estore-auth:latest
    depends_on:
      - kafka
      - postgres
    ports:
      - 9091:9091
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/account
      KAFKA_BOOTSTRAP_SERVER: kafka:29092
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      JWT_SECRET: "your secret"
    networks:
      - estore_app

  email:
    image: tanhaoke/estore-email:latest
    depends_on:
      - kafka
      - postgres
    ports:
      - 9093:9093
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/account
      KAFKA_BOOTSTRAP_SERVER: kafka:29092
      SPRING_EMAIL_PASSWORD: "password"
      SPRING_EMAIL_USERNAME: "username"
    networks:
      - estore_app
  product:
    image: tanhaoke/estore-product:latest
    depends_on:
      - kafka
      - postgres
    ports:
      - 9094:9094
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/product
    networks:
      - estore_app

  media:
    image: tanhaoke/estore-media:latest
    depends_on:
      - kafka
      - postgres
    ports:
      - 9095:9095
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/media
    networks:
      - estore_app

  api:
    image: tanhaoke/estore-api:latest
    build:
      context: api
      dockerfile: Dockerfile
    # depends_on:
    #   - product
    #   - postgres
    #   - media
    #   - auth
    ports:
      - 9090:9090
    networks:
      - estore_app
  ui-home:
    image: tanhaoke/estore-ui-home:latest
    # depends_on:
    #   - ui-product
    #   - ui-auth
    ports:
      - 3000:3000
    networks:
      - estore_app

  ui-product:
    image: tanhaoke/estore-ui-product:latest
    ports:
      - 3002:3002
    networks:
      - estore_app

  ui-auth:
    image: tanhaoke/estore-ui-auth:latest
    ports:
      - 3001:3001
    networks:
      - estore_app


  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@admin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin

    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - estore_app
    restart: unless-stopped

  akhq:
    # build:
    #   context: .
    image: tchiotludo/akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:29092"
              schema-registry:
                url: "http://schema-registry:8085"
              connect:
                - name: "connect"
                  url: "http://connect:8083"

    ports:
      - 8080:8080
    links:
      - kafka
      - schema-registry
    networks:
      - estore_app

  zookeeper:
    image: confluentinc/cp-zookeeper
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data:Z
      - zookeeper-log:/var/lib/zookeeper/log:Z
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_ADMIN_ENABLE_SERVER: 'false'
    networks:
      - estore_app

  kafka:
    image: confluentinc/cp-kafka
    ports:
      - "29092:29092"
      - "9092:9092"
    volumes:
      - kafka-data:/var/lib/kafka/data:Z
    environment:
      KAFKA_BROKER_ID: '0'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_NUM_PARTITIONS: '12'
      KAFKA_COMPRESSION_TYPE: 'gzip'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_JMX_PORT: '9091'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_AUTHORIZER_CLASS_NAME: 'kafka.security.authorizer.AclAuthorizer'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
    links:
      - zookeeper
    networks:
      - estore_app

  schema-registry:
    image: confluentinc/cp-schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:29092'
      SCHEMA_REGISTRY_HOST_NAME: 'schema-registry'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8085'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: 'INFO'
    networks:
      - estore_app

  connect:
    image: confluentinc/cp-kafka-connect
    depends_on:
      - kafka
      - schema-registry
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONNECT_REST_PORT: '8083'
      CONNECT_REST_LISTENERS: 'http://0.0.0.0:8083'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'connect'
      CONNECT_CONFIG_STORAGE_TOPIC: '__connect-config'
      CONNECT_OFFSET_STORAGE_TOPIC: '__connect-offsets'
      CONNECT_STATUS_STORAGE_TOPIC: '__connect-status'
      CONNECT_GROUP_ID: 'kafka-connect'
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_KEY_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: 'true'
      CONNECT_VALUE_CONVERTER: 'io.confluent.connect.avro.AvroConverter'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8085'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: '1'
      CONNECT_PLUGIN_PATH: ' /usr/share/java/'
    networks:
      - estore_app

  swagger-ui:
    image: swaggerapi/swagger-ui:v4.16.0
    ports:
      - 8083:8080
    environment:
      BASE_URL: /swagger-ui
      URLS: "[{ url: 'http://localhost:9094/api-docs', name: 'Product' },{ url: 'http://localhost:9095/api-docs', name: 'Media' },{ url: 'http://localhost:9091/api-docs', name: 'Auth' }]"
    networks:
      - estore_app
networks:
  estore_app:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  redis_data:
    driver: local
  kafka-data: 
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local